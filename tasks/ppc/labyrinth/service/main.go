package main

/* TODO:
1. Info about controls, labyrinth always static size
2. Docker
*/

import (
	"bufio"
	"labyrinth/game"
	"log"
	"net"
	"strconv"
	"time"
)

const (
	HOST         = "0.0.0.0"
	PORT         = "9966"
	TYPE         = "tcp"
	LEVELS       = 250
	MAX_PATH_LEN = 200
	FLAG         = "surctf_easy_m4ze_n0t_3asy_alg"
)

func main() {
	game.Seed(time.Now().UnixNano())

	log.Printf("Starting TCP server on %s:%s", HOST, PORT)
	listener, err := net.Listen("tcp", HOST+":"+PORT)
	if err != nil {
		log.Fatal(err)
	}
	defer listener.Close()

	for {
		c, err := listener.Accept()
		if err != nil {
			log.Println("Error connecting:", err.Error())
			return
		}

		log.Printf("Client %s connected\n", c.RemoteAddr().String())

		go handleConnection(c)
	}
}

func handleConnection(conn net.Conn) {
	defer conn.Close()

	welcomeMSG := ("üòé - —Ç–≤–æ—è –ø–æ–∑–∏—Ü–∏—è\n‚õ≥Ô∏è - —Ç–æ—á–∫–∞ –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–æ–ø–∞—Å—Ç—å\n" +
		"–í—Å–µ –ª–∞–±–∏—Ä–∏–Ω—Ç—ã –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç —É—Å–ª–æ–≤–∏—é '–∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞' a.k.a 'perfect maze'.\n" +
		"–î–ª—è –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Ç—Ä–æ–∫—É –∏–∑ —Ü–∏—Ñ—Ä: 1(–í–≤–µ—Ä—Ö), 2(–í–Ω–∏–∑), 3(–í–ø—Ä–∞–≤–æ), 4(–í–ª–µ–≤–æ).\n" +
		"–ù–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–æ–∫–∞ '223314' –±—É–¥–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å '–≤–Ω–∏–∑-–≤–Ω–∏–∑-–≤–ø—Ä–∞–≤–æ-–≤–ø—Ä–∞–≤–æ-–≤–≤–µ—Ä—Ö-–≤–ª–µ–≤–æ'.\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—É—Ç–∏ - 200 –∫–æ–º–∞–Ω–¥.\n")
	conn.Write([]byte("[INFO]\n" + welcomeMSG))

	for i := 0; i < LEVELS; i++ {
		g := game.NewGame(15, 15)
		for {
			conn.Write([]byte("[MAZE: " + strconv.Itoa(i+1) + "]\n"))
			conn.Write([]byte(g.ToString()))

			conn.Write([]byte("Path: "))
			bytesBuff, err := bufio.NewReader(conn).ReadBytes('\n')
			if err != nil {
				log.Println("Client left")
				return
			}

			path := bytesBuff[:len(bytesBuff)-1]
			if len(path) > MAX_PATH_LEN {
				conn.Write([]byte("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –ø—É—Ç—å! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–ª–∏–Ω–∞ - 200 –∫–æ–º–∞–Ω–¥.\n"))
				return
			}

			for _, move := range path {
				if !g.MovePlayer(int(move) - 48) {
					conn.Write([]byte(g.ToString()))
					conn.Write([]byte("–¢—É–¥–∞ –Ω–µ–ª—å–∑—è! –ü–æ–∫–∞.\n"))
					return
				}
			}

			conn.Write([]byte(g.ToString()))

			if !g.IsWon() {
				conn.Write([]byte("–ü—É—Ç—å –Ω–µ –ø—Ä–∏–≤–µ–ª —Ç–µ–±—è –∫ —Ü–µ–ª–∏((( –ü–æ–∫–∞.\n"))
				return
			} else {
				break
			}
		}
		conn.Write([]byte("GOOD! RESHAI DALSHE!\n"))
	}

	conn.Write([]byte("MOLODEC! DERJY FLAG!\n"))
	conn.Write([]byte(FLAG + "\n"))
}
